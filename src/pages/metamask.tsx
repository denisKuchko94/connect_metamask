import Head from "next/head";
import {
  FormControl,
  InputLabel,
  MenuItem,
  Select,
  Stack,
  Typography,
} from "@mui/material";
import { useStateContext } from "@/context";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { formatChainAsNum } from "@/utils";
import {
  METAMASK_ACCOUNTS,
  NETWORK_NAMES,
  NETWORKS,
  NETWORKS_ARR,
} from "@/utils/const";
import { addressesDev } from "@/utils/addresses";
import { useContracts } from "@/hooks/useContracts";

export default function Metamask() {
  const router = useRouter();

  const {
    wallet: { accounts, balance, chainId },
    token,
    handleChainChanged,
    updateWallet,
  } = useStateContext();

  // to get accounts
  const [bill, setBill] = useState(METAMASK_ACCOUNTS[0].value);

  const [networkChainId, setNetworkChainId] = useState<string>(
    NETWORKS.andromedaMainnet.chainId
  );

  useEffect(() => {
    setNetworkChainId(
      NETWORKS_ARR.find((network) => network.chainId === chainId)?.chainId ||
        NETWORKS.andromedaMainnet.chainId
    );
  }, [chainId]);

  useEffect(() => {
    !accounts.length && router.push("/");
  }, [accounts]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Stack gap={"24px"}>
          <Stack flexDirection={"row"} gap={"16px"}>
            <Typography>Account:</Typography>
            <Typography>{accounts[0] || "--"}</Typography>
          </Stack>
          <Stack flexDirection={"row"} gap={"16px"}>
            <Typography>Balance:</Typography>
            <Typography>{balance || "--"}</Typography>
          </Stack>
          <Stack flexDirection={"row"} gap={"16px"}>
            <Typography>Tokens:</Typography>
            <Typography>{token || "--"}</Typography>
          </Stack>
          <Stack flexDirection={"row"} gap={"16px"}>
            <Typography>ChainId:</Typography>
            <Typography>{formatChainAsNum(chainId) || "--"}</Typography>
          </Stack>

          <Stack flexDirection={"row"} gap={"32px"}>
            <Stack width={"100%"}>
              <FormControl fullWidth>
                <InputLabel id="demo-simple-select-label">Account:</InputLabel>
                <Select
                  labelId="demo-simple-select-label"
                  id="demo-simple-select"
                  value={bill}
                  name={"accounts"}
                  label="Account:"
                  onChange={(e) => {
                    setBill(e.target.value);

                    updateWallet([e.target.value]);
                  }}
                >
                  {METAMASK_ACCOUNTS.map((account) => (
                    <MenuItem key={account.value} value={account.value}>
                      {account.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Stack>
            <Stack width={"100%"}>
              <FormControl fullWidth>
                <InputLabel id="demo-simple-select-label">Network:</InputLabel>
                <Select
                  labelId="demo-simple-select-label"
                  id="demo-simple-select"
                  value={networkChainId}
                  name={"network"}
                  label="Network:"
                  onChange={(e) => {
                    setNetworkChainId(e.target.value);
                    handleChainChanged(e.target.value);
                  }}
                >
                  {NETWORK_NAMES.map((network) => (
                    <MenuItem key={network} value={NETWORKS[network].chainId}>
                      {NETWORKS[network].chainName}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Stack>
          </Stack>
        </Stack>
      </main>
    </>
  );
}
