import { DirectSecp256k1HdWallet } from "@cosmjs/proto-signing";
import { Button, Stack, TextField, Typography } from "@mui/material";
import { generateMnemonic, validateMnemonic } from "bip39";
import Head from "next/head";
import React, { FormEvent, useCallback, useEffect, useState } from "react";

import CopyContainer from "@/components/CopyContainer";
import { formatBalance } from "@/utils";

const WORDS_ENTROPY_15 = 160;
const MNEMONIC_WORDS_15 = 15;

interface Balance {
  denom: string;
  amount: string;
}

interface Wallet {
  balances: Balance[];
}
export default function Cosmos() {
  const [key, setKey] = useState("");

  const [mnemonic, setMnemonic] = useState<string | null>(null);
  const [address, setAddress] = useState<string | null>(null);
  const [balances, setBalances] = useState<Balance[]>([]);
  const [error, setError] = useState<null | string>(null);

  const generateKey = useCallback(() => {
    setMnemonic(generateMnemonic(WORDS_ENTROPY_15));
  }, []);

  const setAddressAndBalance = async (wallet: DirectSecp256k1HdWallet) => {
    const accounts = await wallet.getAccounts();

    const { balances }: Wallet = await fetch(
      `/api/cosmos?address=${accounts[0].address}`,
      {
        method: "GET",
      }
    ).then((response) => response.json());

    setAddress(accounts[0].address);
    setBalances(balances);
  };

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    if (key) {
      setError(null);

      if (!validateMnemonic(key)) {
        setError("Please check mnemonic");

        return;
      }

      const wallet: DirectSecp256k1HdWallet =
        await DirectSecp256k1HdWallet.fromMnemonic(key, { prefix: "mx" });

      setAddressAndBalance(wallet);
      setMnemonic("");
    } else {
      const wallet: DirectSecp256k1HdWallet =
        await DirectSecp256k1HdWallet.generate(MNEMONIC_WORDS_15, {
          prefix: "mx",
        });
      const mnemonic = wallet.mnemonic;

      setMnemonic(mnemonic);
      setAddressAndBalance(wallet);
    }
  };

  useEffect(() => {
    address && setKey("");
  }, [address]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Stack
          height={"100vh"}
          gap={"32px"}
          alignItems={"center"}
          justifyContent={"center"}
        >
          <Stack width={"80%"} gap={"24px"}>
            <Typography variant={"h5"}>Mnemonic:</Typography>
            <Stack flexDirection={"row"} alignItems={"center"} gap={"8px"}>
              <Typography> {mnemonic || "--"}</Typography>

              {mnemonic && <CopyContainer value={mnemonic} />}
            </Stack>
            <Button onClick={generateKey} variant={"contained"}>
              Generate wallet
            </Button>
          </Stack>

          <Stack gap={"16px"} width={"80%"}>
            <Typography>Register</Typography>
            <form onSubmit={handleSubmit}>
              <Stack spacing={2} direction="row" mb={4}>
                <TextField
                  type="text"
                  name={"mnemonic"}
                  id={"mnemonic"}
                  variant="outlined"
                  color="secondary"
                  label="Put yor phrase"
                  onChange={(e) => setKey(e.target.value)}
                  value={key}
                  fullWidth
                  // required
                  helperText={error}
                  error={!!error}
                />
              </Stack>

              <Button variant={"contained"} type="submit" fullWidth>
                {key ? "Register" : "Generate and register"}
              </Button>
            </form>

            <Stack></Stack>
          </Stack>

          <Stack gap={"32px"}>
            {address && (
              <Stack flexDirection={"row"} alignItems={"center"} gap={"8px"}>
                <Typography>Address:</Typography>
                <Typography
                  component={"div"}
                  display={"flex"}
                  flexDirection={"row"}
                  alignItems={"center"}
                  gap={"8px"}
                >
                  {address} <CopyContainer value={address} />
                </Typography>
              </Stack>
            )}
            {!!balances.length &&
              balances.map((balance) => (
                <Stack
                  key={balance.denom}
                  flexDirection={"row"}
                  alignItems={"center"}
                  gap={"8px"}
                >
                  <Typography>Balance:</Typography>
                  <Typography>
                    {`${formatBalance(balance.amount)} ${balance.denom}`}
                  </Typography>
                </Stack>
              ))}
          </Stack>
        </Stack>
      </main>
    </>
  );
}
